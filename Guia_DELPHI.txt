simples editor de texto.

praticar modulos 25, 26, 24, 20, 19
=============| DELPHI |=============

(utiliza trigrama para nomeação)

prjMyTask1.dpr (delphi project)
	- Arquivo que apresenta configurações de projeto.
	- Ponto inicial do projeto Delphi.

untMyTask1.pas (pascal code)
	- Código fonte

.dfm (design da tela)

(OBS: #13 - Quebra de linha)

Prevalece comportamento do código.


=============| Componentes Básicos |=============


[Form] - Tela de Interface.

	Name: serve para chamar o nome no programa.
	(frmMeuForm)


[TLabel] - Rótulo.
	
	Emitir Texto
	Caption: definir texto na barra de título.

[TEdit] - Caixa de Texto.

	
[TButton] - Botão

	Executa ações.
	Se colocar & antes da palavra no caption do botão, é atribuído 
	
[Tdbedit] - DBEdit se conecta com banco de dados.

[TMemo] - Caixa de edição que gerencia várias linhas de texto.
	
	Font e Reandonly: Texto

	Lines[x]: conjunto numerado de linhas

	Count: conta quantidade de linhas.

	WordWrap: controle de edição quebra o texto na margem direita para que ele caiba na área do cliente.

	MaxLenght: define o número máximo de caracteres que pode ser inserido no controle de edição. Se 0, não limita o comprimento do texto inserido.

	Alignment: altera maneira como o texto é formatado.

	ScrollBars: determina se o controle TMemo tem barras de rolagem. O TMemo ignorará a propriedade MaxLength se ela for vertical ou se as duas barras de rolagem estiverem ativadas.

	Métodos:
		Delete(x): exclui a  linha com indice especificado.
		Exchange(x1, x2): troca posição de linha.
		Move(x1, x2): 
		Clear: Limpa tudo.
		Append(): adiciona nova linha ao final do TMemo.
		Add(): adiciona nova linha.
		Insert(2, ''): insere linha em um indice especificado.


[Timer] - tempo

[Dialogs] - janela de dialogo de arquivo
	OpenDialog: lê arquivo.
	SaveDialog: grava em um arquivo existente.

ESTUDAR:::
MANIPULAR E EXIBIR DADOS EM MEMÓRIA:

[DBGrid] - Exibe e manipula registros em formato de tabela.
[TClientDataSet] - conjunto de dados em memória para a tabela temporária.
	
	| STEP BY STEP |
		(Dois cliques na propriedade dentro do form para abrir Fields Editor)

		Fields Editor: definir os campos da tabela.
			New Field - Cria um novo campo.

		(Dois cliques na propriedade dentro do form e clique Create DataSet)
	

	Métodos:
		Append - adicionar a tabela.
		Cancel - cancela a ação.
		Delete - deleta o registro.
		Post - salva os dados na tabela.
		Edit - edita o campo selecionado.
		ApplyUpdates
		Prior
[DataSource] - fonte de dados (DATASOURCE associado ao CLIENTDATASET, DBGRID associado ao DATASOURCE, BINDSOURCE associado ao CLIENTDATASET)
	
[BindSource] - associar campos de dados ao dataset
[DBEdit]
	[datasource]
	[datafield]

=============| Manipulando Eventos |=============

[:=] Atribuição de valores.

Métodos:
	Close - faz o form fechar.
	Clear - limpa o conteúdo.
	Enabled - habilitar ou desabilitar (bool).
	
	Random(N) - retorna um número inteiro entre 0 e N-1.	

	SaveToFile - salvar em arquivo


=============| Variáveis |=============

Bloco de memória que apresenta um nome e tem valor volátil.
(não é case sensitive)

[var] - inicia a seção de declaração de variável.
	depois de [procedure] e antes de [begin]


Tipos de Dados:
	[Integer] - Inteiro.

	[Real/Double] - Real

	[Boolean]
	
	[TDateTime] - Data e Hora
		a:=Date; //Returns the current date 
		b:=Time; //Returns the current time 
		c:=Now; //Returns the current date and time

	[TextFile] - variável de arquivo;
		[AssignFile] - procedimento para associar o arquivo à variável.
			Ex.: AssignFile(f, 'my.txt');

		[Rewrite(<textfile>)] - abrir arquivo para gravação.
			Cria um arquivo vazio associado ao AssignFile ou o conteúdo do arquivo será apagado se já existir.
			
			Writeln(TextFile, valor);
			Write(TextFile, valor);

			Closefile(TextFile); - fecha o arquivo.

			Append(TextFile) - abre arquivo para reescrever.


		[Reset(TextFile)] - abrir arquivo para leitura.
			ReadLn(TextFile, valor) - conteúdo da prinmeira linha irá para 'valor'.

		
		EOF(TextFile) - retorna true se o cursor estiver no fim do arquivo.
		EOLN(TextFile) - retorna true se o cursor estiver no fim da linha.




Operador Aritmético:
	[+][-][*][/]
	[Div] - Divisão de Integer
	[Mod] - Resto da divisão de Integer. 

Função:
	StrToFloat(string);
	FloatToStr(float);
	IntToStr(integer); 
	StrToInt(string);
	BoolToStr(boolean, True);
	TimeToStr();
	DateToStr();
	StrToTime();
	StrToDate();
	StrToDateTime();
	DayOfWeek(Date: TDateTime): Word retorna um número de índice para o dia da semana. 1 = domingo, 2 = segunda-feira etc.
	DecodeDateFully(Date: TDateTime; var Year, Month, Day, DOW: Word): Boolean extrai o ano, o mês, o dia e o DOW (dia da semana). Retorna True para um ano bissexto;
	EncodeDate(var Year, Month, Day: Word): TDateTime gera um valor de retorno TDateTime dos valores de ano, mês e dia passados;
	EncodeTime(Hour, Min, Sec, Msec: Word): TDateTime gera um valor de retorno TDateTime dos valores de hora, minutos, segundos e ms (milissegundo) passados.

=============| Constantes |=============

Const
	<nome da constante> = <valor>;


=============| Criar Tipo de Dado |=============

Type
	kg = integer;

=============| Funções Matemáticas Padrão |=============

Funções:
	
	ABS() - valor absoluto.
	SQR() - quadrado de um número.
	SQRT() - raiz quadrada.
	EXP() - exponenciação de um número.
	LN() - logaritmo natural de um número.
	SIN() - seno do parâmetro.
	COS() - cosseno do parâmetro.
	ARCTAN() - arco tangente do parâmetro.
	ROUND() - arredonda para o inteiro mais próximo.
	TRUNC() - retorna a parte inteira do parâmetro (real/double).
	

=============| Expressões e Operações lógicas |=============

Operadores Relacionais:
	[=] - Igual
	[<>] - Diferente
	[<][<=] - menor/menor ou igual
	[>][>=] - maior/maior ou igual


Operadores Lógicos:
	[not][and][or]


Procedência:
	(), funções, not unary '-', * / div mod and, + - or, = <> < > <= >=





=============| Operadores Condicionais |=============

-> if..then..else | if..then

if <expressão lógica> then
	<instrução 1>
else
	<instrução 2>


Com operação composta:

if <expressão lógica> then
	begin
		<instrução 1>
	end
else
	begin
		<instrução 2>
	end;


=============| Procedimentos |=============

Realização de sub-tarefas. Melhora manutenção, visualização e modularização do código.

Devem ser definidos na seção 'Implementation'

Parâmetro de Chamada: ta nó código principal.
Parâmetro de Valor: copia o valor da var principal.
Parâmetro de Variável: usa a variável.

procedure <nome> (parâmetros);
begin
end;


=============| Função |=============

Deve ter pelo menos 1 operador de atribuição (Result).

Function <nome da função> (<lista de parâmetros >):
<tipo de valor de retorno>;
<declarações locais> 
begin
<instruções> 
end;


=============| Gráficos |=============

Recursos gráficos.

[TPaintBox] - Desenhos Gráficos.

Canvas - propriedade de pintura.

Pen - alterar cor e a largura das linhas.

Brush - preencher o espaço interno de figuras fechadas.

PONTO: Pixels[x, y]

LINHA: LineTo(x, y)

MOVE CANETA: MoveTo(x, y)

RETANGULO: Rectangle(x1, y1, x2, y2)

ELIPSE: Ellipse(X1, Y1, X2, Y2)


=============| Loops |=============

Pré-Validação:-----------------

while <expressão> do
<instrução>; (begin..end se necessário)

Pós-Validação:-----------------

repeat
<instrução>
until <expressão>;

Número de loop conhecido:

for <contador> := <valor inicial> To <valor final> do
	<instrução>;
or
for <contador> := <valor inicial> DownTo <valor final> do
	<instrução>;

	Ex.: for I := 1 to 5 do
	     begin
		soma := soma + valores[i];
	     end;


=============| Array |=============

<nome da matriz>: Array [<índice inicial>..<índice final>] Of <tipo de elemento>;

A: array[1..10] of real;

Matriz: Array[1..3][1..3] of string;


=============| Strings |=============

Procedimentos:
	Delete(st, pos, N); [st: string; pos, N: integer]
	Excluir os símbolos N a partir da string St, começando na posição Pos.

	Insert(St1, St2, Pos); [St1, St2: string; Pos: integer]
	Insira símbolos da string St1 na string St2 a partir da posição Pos.

Função:
	Copy(St, Poz, N) [Retorno: string; St: string; Pos, N: integer]
	O resultado é a cópia de N símbolos da string St a partir da posição Pos.

	Length(St) [Retorno: integer; St: string]
	Calcula o comprimento (contagem de símbolo) da string St.

	Pos(St1, St2) [Retorno: integer; St1, St2: string]
	Procura a primeira ocorrência da substring St1 na string St. O resultado é  a posição do primeiro símbolo da substring. Se a substring não foi encontrada, retorna 0.

processos de debug, manipulação de arrays, uso e propriedades de TMemo, visualização de histórico da manipulação do projeto




MessageDlg('Mensagem', mtConfirmation, [mbYes, mbNo],0) = mrYes

praq serve tab order - ordem para clicar no tab
=============| Conexão de Banco de Dados |=============
(use unit para ter acesso ao data module no form do crud)
DataModule no VCLaplication - delphi files (pra colocar componentes de conexão de banco)
SQLConnection

FDConnection

SQLQuery
	2 cliques - fields editor - add all fields

DataSetProvider - pega a informação da query e passa pro dataset

ClientDataSet - conecta aos fields
	2 cliques - fields editor - add all fields

DataSource - fonte de dados

devart pra postgre